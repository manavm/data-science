summary(glm.out)
lr_data <- data.frame(predictor=glm.out$linear.predictors, prob=glm.out$fitted.values, Married=Males$married)
ggplot(lr_data, aes(x=predictor, y=prob, color=Married)) + geom_point()
ggplot(lr_data, aes(x=predictor, fill=Married)) + geom_density(alpha=.5)
ggplot(lr_data, aes(x=predictor, y=prob, color=Married)) + geom_point()
ggplot(lr_data, aes(x=predictor, fill=Married)) + geom_density(alpha=.5)
glm.out <- glm(married ~ nr + school + exper + union + ethn + wage,
data = Males,
family = binomial) # family = binomial required for logistic regression
summary(glm.out)
lr_data <- data.frame(predictor=glm.out$linear.predictors, prob=glm.out$fitted.values, Married=Males$married)
ggplot(lr_data, aes(x=predictor, fill=Married)) + geom_density(alpha=.5)
ggplot(lr_data, aes(x=predictor, y=prob, color=Married)) + geom_point()
ggplot(lr_data, aes(x=predictor, fill=Married)) + geom_density(alpha=.5)
glm.out <- glm(married ~ nr + school + exper + union + industry+ ethn + wage,
data = Males,
family = binomial) # family = binomial required for logistic regression
summary(glm.out)
lr_data <- data.frame(predictor=glm.out$linear.predictors, prob=glm.out$fitted.values, Married=Males$married)
ggplot(lr_data, aes(x=predictor, y=prob, color=Married)) + geom_point()
ggplot(lr_data, aes(x=predictor, fill=Married)) + geom_density(alpha=.5)
lr_data <- data.frame(predictor=glm.out$linear.predictors, prob=glm.out$fitted.values, Married=Males$married)
ggplot(lr_data, aes(x=predictor, y=prob, color=Married)) + geom_point()
ggplot(lr_data, aes(x=predictor, fill=Married)) + geom_density(alpha=.5)
ggplot(lr_data, aes(x=predictor, y=prob, color=Married)) + geom_point()
calc_ROC <- function(probabilities, known_truth, model.name=NULL)
{
outcome <- as.numeric(factor(known_truth))-1
pos <- sum(outcome) # total known positives
neg <- sum(1-outcome) # total known negatives
pos_probs <- outcome*probabilities # probabilities for known positives
neg_probs <- (1-outcome)*probabilities # probabilities for known negatives
true_pos <- sapply(probabilities,
function(x) sum(pos_probs>=x)/pos) # true pos. rate
false_pos <- sapply(probabilities,
function(x) sum(neg_probs>=x)/neg)
if (is.null(model.name))
result <- data.frame(true_pos, false_pos)
else
result <- data.frame(true_pos, false_pos, model.name)
result %>% arrange(false_pos, true_pos)
}
ROC1 <- calc_ROC(probabilities=glm.out$fitted.values, # predicted probabilities
known_truth=Males$married,      # the known truth, i.e., true species assignment
model.name="Petal.Width")
ggplot(data=NULL, aes(x=false_pos, y=true_pos)) +
geom_line(data=ROC1, aes(color=model.name))
ROC1 <- calc_ROC(probabilities=glm.out$fitted.values, # predicted probabilities
known_truth=Males$married,      # the known truth, i.e., true species assignment
model.name="Combined")
ggplot(data=NULL, aes(x=false_pos, y=true_pos)) +
geom_line(data=ROC1, aes(color=model.name))
ROC1 %>% mutate(delta=false_pos-lag(false_pos)) %>%
summarize(AUC=sum(delta*true_pos, na.rm=T))
ROC <- calc_ROC(probabilities=glm.out$fitted.values, # predicted probabilities
known_truth=Males$married,      # the known truth, i.e., true species assignment
model.name="Combined")
ggplot(data=NULL, aes(x=false_pos, y=true_pos)) +
geom_line(data=ROC, aes(color=model.name))
ROC1 %>% mutate(delta=false_pos-lag(false_pos)) %>%
summarize(AUC=sum(delta*true_pos, na.rm=T))
```
glm.out <- glm(married ~ nr + school + exper + union + ethn + wage,
data = Males,
family = binomial) # family = binomial required for logistic regression
summary(glm.out)
lr_data <- data.frame(predictor=glm.out$linear.predictors, prob=glm.out$fitted.values, Married=Males$married)
ggplot(lr_data, aes(x=predictor, y=prob, color=Married)) + geom_point()
ggplot(lr_data, aes(x=predictor, fill=Married)) + geom_density(alpha=.5)
calc_ROC <- function(probabilities, known_truth, model.name=NULL)
{
outcome <- as.numeric(factor(known_truth))-1
pos <- sum(outcome) # total known positives
neg <- sum(1-outcome) # total known negatives
pos_probs <- outcome*probabilities # probabilities for known positives
neg_probs <- (1-outcome)*probabilities # probabilities for known negatives
true_pos <- sapply(probabilities,
function(x) sum(pos_probs>=x)/pos) # true pos. rate
false_pos <- sapply(probabilities,
function(x) sum(neg_probs>=x)/neg)
if (is.null(model.name))
result <- data.frame(true_pos, false_pos)
else
result <- data.frame(true_pos, false_pos, model.name)
result %>% arrange(false_pos, true_pos)
}
ROC <- calc_ROC(probabilities=glm.out$fitted.values, # predicted probabilities
known_truth=Males$married,      # the known truth, i.e., true species assignment
model.name="Combined")
ggplot(data=NULL, aes(x=false_pos, y=true_pos)) +
geom_line(data=ROC, aes(color=model.name))
ROC1 %>% mutate(delta=false_pos-lag(false_pos)) %>%
summarize(AUC=sum(delta*true_pos, na.rm=T))
```
glm.out <- glm(married ~ nr + school + exper + union + ethn + wage,
data = Males,
family = binomial) # family = binomial required for logistic regression
summary(glm.out)
ROC1 %>% mutate(delta=false_pos-lag(false_pos)) %>%
summarize(AUC=sum(delta*true_pos, na.rm=T))
summary(Males)
Males %>% select(wage, exper, occupation) %>% group_by(occupation) %>% filter(occupation %in% c("Sales_Workers", "Service_Workers"))-> new_males
new_males
ggplot(new_males, aes(x=exper, y=wage, color = occupation)) + geom_point() + geom_smooth(aes(group=occupation), method=lm, se=F)
Males %>% filter(occupation == "Sales_Workers") -> sales
Males %>% filter(occupation == "Service_Workers") -> service
fit_sales<-lm(wage~exper, data=sales)
fit_service<-lm(wage~exper, data=service)
summary(fit_sales)
summary(fit_service)
summary(fit_sales)
summary(fit_service)
?Males
Males
?Males
head(Males)
?Males
summary(Males)
Males %>% select(wage, exper, occupation) %>% group_by(occupation) %>% filter(occupation %in% c("Sales_Workers", "Service_Workers"))-> new_males
new_males
ggplot(new_males, aes(x=exper, y=wage, color = occupation)) + geom_point() + geom_smooth(aes(group=occupation), method=lm, se=F)
Males %>% filter(occupation == "Sales_Workers") -> sales
Males %>% filter(occupation == "Service_Workers") -> service
fit_sales<-lm(wage~exper, data=sales)
fit_service<-lm(wage~exper, data=service)
summary(fit_sales)
summary(fit_service)
Males %>% select(wage, exper, occupation) %>% group_by(occupation) %>% filter(occupation %in% c("Sales_Workers", "Service_Workers"))-> new_males
new_males
ggplot(new_males, aes(x=exper, y=wage, color = occupation)) + geom_point() + geom_smooth(aes(group=occupation), method=lm, se=F)
```{r global_options, include=FALSE}
library(knitr)
opts_chunk$set(fig.align="center", fig.height=4, fig.width=5)
library(ggplot2)
theme_set(theme_bw(base_size=12))
library(dplyr)
library(tidyr)
library(grid)
library(plm)
```
## Project 3
Males %>% select(wage, exper, occupation) %>% group_by(occupation) %>% filter(occupation %in% c("Sales_Workers", "Service_Workers"))-> new_males
new_males
ggplot(new_males, aes(x=exper, y=wage, color = occupation)) + geom_point() + geom_smooth(aes(group=occupation), method=lm, se=F)
glm.out <- glm(married ~ nr + year + school + exper + union + ethn + health + occupation + wage + industry + residence,
data = Males,
family = binomial)
summary(glm.out)
glm.out <- glm(married ~ nr + year + school + exper + union + ethn + health + occupation + wage + industry,
data = Males,
family = binomial) # family = binomial required for logistic regression
summary(glm.out)
glm.out <- glm(married ~ nr + school + exper + union + ethn + occupation + industry + wage,
data = Males,
family = binomial) # family = binomial required for logistic regression
summary(glm.out)
glm.out <- glm(married ~ nr + school + exper + union + ethn + industry + wage,
data = Males,
family = binomial) # family = binomial required for logistic regression
summary(glm.out)
glm.out <- glm(married ~ nr + year + school + exper + union + ethn + occupation + industry + wage,
data = Males,
family = binomial) # family = binomial required for logistic regression
summary(glm.out)
glm.out <- glm(married ~ nr + year + school + exper + union + ethn + industry + wage,
data = Males,
family = binomial) # family = binomial required for logistic regression
summary(glm.out)
glm.out <- glm(married ~ nr + year + school + exper + union + ethn + occupation + industry + wage,
data = Males,
family = binomial) # family = binomial required for logistic regression
summary(glm.out)
glm.out <- glm(married ~ nr + year + school + exper + union + ethn + industry + wage,
data = Males,
family = binomial) # family = binomial required for logistic regression
summary(glm.out)
glm.out <- glm(married ~ nr + school + exper + union + ethn + occupation + industry + wage,
data = Males,
family = binomial) # family = binomial required for logistic regression
summary(glm.out)
glm.out <- glm(married ~ nr + school + exper + union + ethn + industry + wage,
data = Males,
family = binomial) # family = binomial required for logistic regression
summary(glm.out)
glm.out <- glm(married ~ nr + year + school + exper + union + ethn + health + occupation + wage + industry + residence,
data = Males,
family = binomial)
summary(glm.out)
# Remove residence
glm.out <- glm(married ~ nr + year + school + exper + union + ethn + health + occupation + wage + industry,
data = Males,
family = binomial)
summary(glm.out)
glm.out <- glm(married ~ nr + year + school + exper + union + ethn + occupation + industry + wage,
data = Males,
family = binomial)
summary(glm.out)
glm.out <- glm(married ~ nr + year + school + exper + union + ethn + industry + wage,
data = Males,
family = binomial)
summary(glm.out)
glm.out <- glm(married ~ nr + school + exper + union + ethn + industry + wage,
data = Males,
family = binomial)
summary(glm.out)
lr_data <- data.frame(predictor=glm.out$linear.predictors, prob=glm.out$fitted.values, Married=Males$married)
ggplot(lr_data, aes(x=predictor, y=prob, color=Married)) + geom_point()
ggplot(lr_data, aes(x=predictor, fill=Married)) + geom_density(alpha=.5)
ggplot(lr_data, aes(x=predictor, y=prob, color=Married)) + geom_point()
lr_data <- data.frame(predictor=glm.out$linear.predictors, prob=glm.out$fitted.values, Married=Males$married)
ggplot(lr_data, aes(x=predictor, y=prob, color=Married)) + geom_point()
ggplot(lr_data, aes(x=predictor, fill=Married)) + geom_density(alpha=.5)
calc_ROC <- function(probabilities, known_truth, model.name=NULL)
{
outcome <- as.numeric(factor(known_truth))-1
pos <- sum(outcome) # total known positives
neg <- sum(1-outcome) # total known negatives
pos_probs <- outcome*probabilities # probabilities for known positives
neg_probs <- (1-outcome)*probabilities # probabilities for known negatives
true_pos <- sapply(probabilities,
function(x) sum(pos_probs>=x)/pos) # true pos. rate
false_pos <- sapply(probabilities,
function(x) sum(neg_probs>=x)/neg)
result <- data.frame(true_pos, false_pos)
if (is.null(model.name))
else
result <- data.frame(true_pos, false_pos, model.name)
result %>% arrange(false_pos, true_pos)
}
ROC <- calc_ROC(probabilities=glm.out$fitted.values, # predicted probabilities
known_truth=Males$married,      # the known truth, i.e., true species assignment
model.name="Combined")
ggplot(data=NULL, aes(x=false_pos, y=true_pos)) +
geom_line(data=ROC, aes(color=model.name))
ROC1 %>% mutate(delta=false_pos-lag(false_pos)) %>%
summarize(AUC=sum(delta*true_pos, na.rm=T))
```
?Males
Males
head(Males)
ncol(Males)
ggplot(lr_data, aes(x=predictor, y=prob, color=Married)) + geom_point()
glm.out <- glm(married ~ nr + school + ex per + union + ethn + industry + wage,
data = Males,
family = binomial)
summary(glm.out)
ggplot(new_males, aes(x=exper, y=wage, color = occupation)) + geom_point() + geom_smooth(aes(group=occupation), method=lm, se=F)
```{r global_options, include=FALSE}
library(knitr)
opts_chunk$set(fig.align="center", fig.height=4, fig.width=5)
library(ggplot2)
theme_set(theme_bw(base_size=12))
library(dplyr)
library(tidyr)
library(grid)
library(plm)
# Pick the relevant columns and occupations
Males %>% select(wage, exper, occupation) %>% group_by(occupation) %>% filter(occupation %in% c("Sales_Workers", "Service_Workers"))-> new_males
# Plot experiance against wages and color by occupation. Smooth the points of the scatter plot by forming a line of best fit
ggplot(new_males, aes(x=exper, y=wage, color = occupation)) + geom_point() + geom_smooth(aes(group=occupation), method=lm, se=F)
# Create new dataframes using sales and service workers respectively
Males %>% filter(occupation == "Sales_Workers") -> sales
Males %>% filter(occupation == "Service_Workers") -> service
# Perform linear regressions on those frames
fit_sales<-lm(wage~exper, data=sales)
fit_service<-lm(wage~exper, data=service)
# Outputting summary of the results
summary(fit_sales)
summary(fit_service)
```
glm.out <- glm(married ~ nr + year + school + exper + union + ethn + health + occupation + wage + industry + residence,
data = Males,
family = binomial)
summary(glm.out)
# Remove residence due to it's high p-value
glm.out <- glm(married ~ nr + year + school + exper + union + ethn + health + occupation + wage + industry,
data = Males,
family = binomial)
summary(glm.out)
# Remove health due to it's high p-value
glm.out <- glm(married ~ nr + year + school + exper + union + ethn + occupation + industry + wage,
data = Males,
family = binomial)
summary(glm.out)
# Remove occupation as most of it's categories have a high p-value
glm.out <- glm(married ~ nr + year + school + exper + union + ethn + industry + wage,
data = Males,
family = binomial)
summary(glm.out)
# Remove year due to it's high p-value
glm.out <- glm(married ~ nr + school + ex per + union + ethn + industry + wage,
data = Males,
family = binomial)
summary(glm.out)
# Convert into data frame using predictors and probabilities
lr_data <- data.frame(predictor=glm.out$linear.predictors, prob=glm.out$fitted.values, Married=Males$married)
# Plot the data using a scatter plot
ggplot(lr_data, aes(x=predictor, y=prob, color=Married)) + geom_point()
# Function to calculate ROC values
calc_ROC <- function(probabilities, known_truth, model.name=NULL)
{
outcome <- as.numeric(factor(known_truth))-1
pos <- sum(outcome) # total known positives
glm.out <- glm(married ~ nr + year + school + exper + union + ethn + health + occupation + wage + industry + residence,
data = Males,
# Logistical regression on all attribtues
glm.out <- glm(married ~ nr + year + school + exper + union + ethn + health + occupation + wage + industry + residence,
data = Males,
family = binomial)
summary(glm.out)
# Remove residence due to it's high p-value
glm.out <- glm(married ~ nr + year + school + exper + union + ethn + health + occupation + wage + industry,
data = Males,
family = binomial)
summary(glm.out)
# Remove health due to it's high p-value
glm.out <- glm(married ~ nr + year + school + exper + union + ethn + occupation + industry + wage,
data = Males,
family = binomial)
summary(glm.out)
# Remove occupation as most of it's categories have a high p-value
glm.out <- glm(married ~ nr + year + school + exper + union + ethn + industry + wage,
data = Males,
family = binomial)
# Logistical regression on all attribtues
glm.out <- glm(married ~ nr + year + school + exper + union + ethn + health + occupation + wage + industry + residence,
data = Males,
family = binomial)
summary(glm.out)
# Remove residence due to it's high p-value
glm.out <- glm(married ~ nr + year + school + exper + union + ethn + health + occupation + wage + industry,
data = Males,
family = binomial)
summary(glm.out)
# Remove health due to it's high p-value
glm.out <- glm(married ~ nr + year + school + exper + union + ethn + occupation + industry + wage,
data = Males,
family = binomial)
summary(glm.out)
# Remove occupation as most of it's categories have a high p-value
glm.out <- glm(married ~ nr + year + school + exper + union + ethn + industry + wage,
data = Males,
family = binomial)
summary(glm.out)
#Remove year due to it's high p-value
glm.out <- glm(married ~ nr + school + ex per + union + ethn + industry + wage,
data = Males,
library(ggplot2)
library(knitr)
opts_chunk$set(fig.align="center", fig.height=3, fig.width=4)
library(ggplot2)
theme_set(theme_bw(base_size=12))
library(tidyr)
library(dplyr)
library(grid)
```
```{r}
data = read.csv("datasets/OnlineNewsPopularity/OnlineNewsPopularity.csv", header = TRUE)
data %>% gather(day, count, weekday_is_monday:weekday_is_sunday) %>% head(15) -> data_days
data_days %>% select(-count) -> data
head(data, 2)
setwd("Documents/Git/data-science")
data = read.csv("datasets/OnlineNewsPopularity/OnlineNewsPopularity.csv", header = TRUE)
data %>% gather(day, count, weekday_is_monday:weekday_is_sunday) %>% head(15) -> data_days
data_days %>% select(-count) -> data
head(data, 2)
data[,sapply(data, function(v) var(v, na.rm=TRUE)!=0)] -> data
# Perform PCA
data %>% select(-url) %>% kmeans(centers=5) -> km
km
km$centers
head(data)
data = read.csv("datasets/OnlineNewsPopularity/OnlineNewsPopularity.csv", header = TRUE)
data %>% gather(day, count, weekday_is_monday:weekday_is_sunday) %>% head(15) -> data_days
head(data_days)
glm.out <- glm(day ~ timedelta + n_tokens_title + n_tokens_content + n_unique_tokens + n_non_stop_words + n_non_stop_unique_tokens + num_hrefs + num_self_hrefs + num_imgs + num_videos + average_token_length + num_keywords + data_channel_is_lifestyle + data_channel_is_entertainment + data_channel_is_bus + data_channel_is_socmed + data_channel_is_tech + data_channel_is_world + kw_min_min + kw_max_min + kw_avg_min + kw_min_max + kw_max_max + kw_avg_max + kw_min_avg + kw_max_avg + kw_avg_avg + self_reference_min_shares + self_reference_max_shares + self_reference_avg_sharess + is_weekend + LDA_00 + LDA_01 + LDA_02 + LDA_03 + LDA_04 + global_subjectivity + global_sentiment_polarity + global_rate_positive_words + global_rate_negative_words + rate_positive_words + rate_negative_words + avg_positive_polarity + min_positive_polarity + max_positive_polarity + avg_negative_polarity + min_negative_polarity + max_negative_polarity + title_subjectivity + title_sentiment_polarity + abs_title_subjectivity + abs_title_sentiment_polarity,
data = data_days,
family = binomial) # family = binomial required for logistic regression
summary(glm.out)
head(data_days)
glm.out <- lm(day ~ timedelta + n_tokens_title + n_tokens_content + n_unique_tokens + n_non_stop_words + n_non_stop_unique_tokens + num_hrefs + num_self_hrefs + num_imgs + num_videos + average_token_length + num_keywords + data_channel_is_lifestyle + data_channel_is_entertainment + data_channel_is_bus + data_channel_is_socmed + data_channel_is_tech + data_channel_is_world + kw_min_min + kw_max_min + kw_avg_min + kw_min_max + kw_max_max + kw_avg_max + kw_min_avg + kw_max_avg + kw_avg_avg + self_reference_min_shares + self_reference_max_shares + self_reference_avg_sharess + is_weekend + LDA_00 + LDA_01 + LDA_02 + LDA_03 + LDA_04 + global_subjectivity + global_sentiment_polarity + global_rate_positive_words + global_rate_negative_words + rate_positive_words + rate_negative_words + avg_positive_polarity + min_positive_polarity + max_positive_polarity + avg_negative_polarity + min_negative_polarity + max_negative_polarity + title_subjectivity + title_sentiment_polarity + abs_title_subjectivity + abs_title_sentiment_polarity,
data = data_days) # family = binomial required for logistic regression
summary(glm.out)
library(knitr)
opts_chunk$set(fig.align="center", fig.height=4, fig.width=5)
library(ggplot2)
theme_set(theme_bw(base_size=12))
library(dplyr)
library(tidyr)
library(grid)
library(grid)
library(grid)
orig_data = read.csv("Tennis-Major-Tournaments-Match-Statistics/data/FrenchOpen-men-2013.csv", header = TRUE)
head(orig_data)
data = read.csv("Tennis-Major-Tournaments-Match-Statistics/data/FrenchOpen-men-2013.csv", header = TRUE)
head(data)
# Perform PCA
data %>% select(-url) %>% scale() %>% prcomp() -> pca
data %>% scale() %>% prcomp() -> pca
data[,sapply(data, function(v) var(v, na.rm=TRUE)!=0)] -> data
# Perform PCA
data %>% scale() %>% prcomp() -> pca
head(data)
data %>% scale(-Player1,-Player2) %>% prcomp() -> pca
head(data)
data %>% select(-Player1) %>% scale() %>% prcomp() -> pca
data %>% select(-Player1, -Player2) %>% scale() %>% prcomp() -> pca
data[,sapply(data, function(v) var(v, na.rm=TRUE)!=0)] -> data
head(data)
head(na.omit(data))
na.omit(data) %>% select(-Player1, -Player2) %>% scale() %>% prcomp() -> pca
head(pca$x)
source('~/.active-rstudio-document')
rotation_data <- data.frame(pca$rotation, variable=row.names(pca$rotation))
na.omit(data) %>% select(-Player1, -Player2) %>% scale() %>% prcomp() -> pca
head(pca$x)
rotation_data <- data.frame(pca$rotation, variable=row.names(pca$rotation))
arrow_style <- arrow(length = unit(0.05, "inches"),
type = "closed")
ggplot(rotation_data) +
geom_segment(aes(xend=PC1, yend=PC2), x=0, y=0, arrow=arrow_style) +
geom_text(aes(x=PC1, y=PC2, label=variable), hjust=0, size=3, color='red') +
xlim(-.5,.5) +
ylim(-.5,.25) +
coord_fixed()
# Percentage of variance explained
percent <- 100*pca$sdev^2/sum(pca$sdev^2)
percent
perc_data <- data.frame(percent=percent, PC=1:length(percent))
ggplot(perc_data, aes(x=PC, y=percent, fill=percent)) +
geom_bar(stat="identity") +
geom_text(aes(label=round(percent, 2)), size=4, vjust=-.5) +
ylim(0, 80)
data[,sapply(data, function(v) var(v, na.rm=TRUE)!=0)] -> data
# Perform PCA
data %>% select(-url) %>% scale() %>% prcomp() -> pca
head(pca$x)
rotation_data <- data.frame(pca$rotation, variable=row.names(pca$rotation))
arrow_style <- arrow(length = unit(0.05, "inches"),
type = "closed")
ggplot(rotation_data) +
geom_segment(aes(xend=PC1, yend=PC2), x=0, y=0, arrow=arrow_style) +
geom_text(aes(x=PC1, y=PC2, label=variable), hjust=0, size=3, color='red') +
xlim(-.5,.5) +
ylim(-.5,.25) +
coord_fixed()
# Percentage of variance explained
percent <- 100*pca$sdev^2/sum(pca$sdev^2)
percent
perc_data <- data.frame(percent=percent, PC=1:length(percent))
ggplot(perc_data, aes(x=PC, y=percent, fill=percent)) +
geom_bar(stat="identity") +
geom_text(aes(label=round(percent, 2)), size=4, vjust=-.5) +
ylim(0, 80)
```
na.omit(data) %>% select(-Player1, -Player2) %>% scale() %>% prcomp() -> pca
head(pca$x)
rotation_data <- data.frame(pca$rotation, variable=row.names(pca$rotation))
arrow_style <- arrow(length = unit(0.05, "inches"),
type = "closed")
ggplot(rotation_data) +
geom_segment(aes(xend=PC1, yend=PC2), x=0, y=0, arrow=arrow_style) +
geom_text(aes(x=PC1, y=PC2, label=variable), hjust=0, size=3, color='red') +
xlim(-.5,.5) +
ylim(-.5,.25) +
coord_fixed()
# Percentage of variance explained
percent <- 100*pca$sdev^2/sum(pca$sdev^2)
percent
perc_data <- data.frame(percent=percent, PC=1:length(percent))
ggplot(perc_data, aes(x=PC, y=percent, fill=percent)) +
geom_bar(stat="identity") +
geom_text(aes(label=round(percent, 2)), size=4, vjust=-.5) +
ylim(0, 80)
library(knitr)
opts_chunk$set(fig.align="center", fig.height=4, fig.width=5)
library(ggplot2)
theme_set(theme_bw(base_size=12))
library(dplyr)
library(tidyr)
library(grid)
data = read.csv("Tennis-Major-Tournaments-Match-Statistics/data/FrenchOpen-men-2013.csv", header = TRUE)
head(data)
# Delete columns with unit variance
data[,sapply(data, function(v) var(v, na.rm=TRUE)!=0)] -> data
na.omit(data)
# Perform PCA
na.omit(data) %>% select(-Player1, -Player2) %>% scale() %>% prcomp() -> pca
head(pca$x)
rotation_data <- data.frame(pca$rotation, variable=row.names(pca$rotation))
arrow_style <- arrow(length = unit(0.05, "inches"),
type = "closed")
ggplot(rotation_data) +
geom_segment(aes(xend=PC1, yend=PC2), x=0, y=0, arrow=arrow_style) +
geom_text(aes(x=PC1, y=PC2, label=variable), hjust=0, size=3, color='red') +
xlim(-.5,.5) +
ylim(-.5,.25) +
coord_fixed()
# Percentage of variance explained
percent <- 100*pca$sdev^2/sum(pca$sdev^2)
percent
perc_data <- data.frame(percent=percent, PC=1:length(percent))
ggplot(perc_data, aes(x=PC, y=percent, fill=percent)) +
geom_bar(stat="identity") +
geom_text(aes(label=round(percent, 2)), size=4, vjust=-.5) +
ylim(0, 80)
head(pca$x)
data[,sapply(data, function(v) var(v, na.rm=TRUE)!=0)] -> data
na.omit(data)
# Perform PCA
na.omit(data) %>% select(-Player1, -Player2) %>% scale() %>% prcomp() -> pca
head(pca$x)
